version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    networks:
      - kafka-network
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka:9092,LISTENER_EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  my-python-producer:
    image: mpradeep954/fetch-de-data-gen
    depends_on:
      - kafka
    restart: on-failure:10
    ports:
      - 9093:9093
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: user-login
    networks:
      - kafka-network
#configuration for the consumer conatiner
#file excuted in consumer.py
  my-python-consumer:
    build:
      context: .
      dockerfile: src/consumer/Dockerfile.consumer
    depends_on:
      - kafka
    restart: on-failure:10
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_INPUT_TOPIC: user-login               #using the data produced by the producer
      KAFKA_OUTPUT_TOPIC: processed-data
    networks:
      - kafka-network
#configuration for the flask server container
#file executed is server.py
  flask-server:
    build:
      context: .
      dockerfile: src/web/Dockerfile.server
    depends_on:
      - kafka
      - my-python-consumer
    ports:
      - "5000:5000"               #running server on port 5000
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_OUTPUT_TOPIC: processed-data      #using the data produced by consumer.py
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge
